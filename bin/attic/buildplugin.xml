<?xml version="1.0" encoding="UTF-8"?>
<!-- file build.xml in your project root directory -->
<project name="project" default="build" basedir=".">

	<target name="properties" if="eclipse.running">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

    <target name="init" depends="properties">
      <fail unless="rapla.dir" message="Don't invoke buildplugin.xml directly. It is called from build.xml. Set plugin.includes and blugin.base in build.properties and use build-plugins target."/>
      <property name="raplalib.dir" value="${rapla.dir}/lib"/>
      <property name="rapla.build.dest.main" value="${rapla.build.dir}/classes" />
      <property name="rapla.build.dest.client" value="${rapla.build.dir}/clientclasses" />
      <property file="${basedir}/build.number"/>
      <property file="${basedir}/build.properties"/>
      <basename property="project.name" file="${basedir}"/>
      <property name="doc.version" value="0.1"/>
      <property name="main.lib" value="rapla_${project.name}-${doc.version}.jar"/>
      <property name="mainclient.lib" value="raplaclient_${project.name}-${doc.version}.jar"/>
      <property name="lib.dir" value="${basedir}/lib"/>
      <property name="war.dir" value="${basedir}/war"/>
      <available file="${war.dir}" type="dir"  property="war.present" />
      
        <!-- Information about the compiler -->
	  <!-- property name="build.compiler" value="javac1.3"/-->
	  <property name="debug"          value="on"/>
	  <property name="optimize"       value="off"/>
	  <property name="deprecation"    value="on"/>
      <property name="target_vm"         value="1.6"/>
	  <property name="verbose"        value="no"/>
	  <property name="packages"       value="org.*"/>
      <!-- The rapla-directories -->
	  <property name="src.dir" value="${basedir}/src" />
	  <property name="temp.dir" value="${basedir}/temp" />
	  <property name="build.dir" value="${basedir}/build" />
	  <property name="generated.dir" value="${build.dir}/generated-src"/>
	  <property name="build.dest" value="${build.dir}/classes" />
    </target>

    <!-- edit the following lines to your needs            -->
	<target name="prepare" depends="init">
	    <mkdir dir="${generated.dir}" />
	    <mkdir dir="${build.dir}" />
	    <mkdir dir="${build.dest}" />
	    <mkdir dir="${build.dest}/META-INF" />
   </target>
		
  <target name="clean" description="Clean the build directory" depends="init">
	<delete dir="${build.dir}" />
  </target>

  <target name="build-dependencies" depends="prepare" if="plugin.dependencies.includes">
	 <ant antfile="${rapla.dir}/build.xml" dir="${rapla.dir}" target="build-plugins-sub" inheritAll="false">
	    <property name="plugin.dependencies.sub" value="${plugin.dependencies.includes}"/>
	    <property name="basedir" value="${rapla.dir}"/>
	    <property name="plugin.base" value="${plugin.base}"/>
     </ant>
  </target>
 
  <target name="compile" depends="prepare,build-dependencies">
    <property name="plugin.base.absolute" location="${plugin.base}"/>
    <pathconvert dirsep="/" pathsep="," property="plugin.dependencies.build.test">
       <map from="${plugin.base.absolute}/" to="" /><!-- This is the trick. Remove slash to make path absolute. -->
       <regexpmapper from="(.*)" to="\1/build/classes" handledirsep="yes"/>
       <dirset id="plugin.dependencies" dir="${plugin.base}" includes="${plugin.dependencies.includes}"/>
    </pathconvert>
    
    <condition property="plugin.dependencies.build" value="${plugin.dependencies.build.test}" else="nothing_plugin">
       <isset property="plugin.dependencies.includes"/>
    </condition>
    <echo message="${basedir} dependencies ${plugin.dependencies.build}" level="verbose"/>
    
    <!-- Compile the java code from ${src} into ${build.dir} -->
  	<!-- first the client only code -->
  	<javac srcdir="${src.dir}"
           destdir="${build.dest}"
           debug="${debug}"
    	   sourcepath=""
 	 	   source="${target_vm}"
 	 	   target="${target_vm}"
           optimize="${optimize}"
           deprecation="${deprecation}"
 	       verbose="${verbose}"
     	   includeAntRuntime="false"
     	>
         <classpath>
           <fileset dir="${lib.dir}" erroronmissingdir="false">
             <include name="common/**"/>
           </fileset>
           <fileset dir="${raplalib.dir}">
           	 <include name="common/**"/>
           </fileset>
	       <dirset dir="${plugin.base}" includes="${plugin.dependencies.build}"/>
           <pathelement path="${rapla.build.dest.client}"/>

         </classpath>
         <exclude name="**/server/**"/>
    </javac>
  	<!-- then the rest -->
  	<javac srcdir="${src.dir}"
           destdir="${build.dest}"
           debug="${debug}"
	 	   source="${target_vm}"
  		   sourcepath=""
  		   target="${target_vm}"
           optimize="${optimize}"
           deprecation="${deprecation}"
	       verbose="${verbose}"
    	   includeAntRuntime="false"
    	>
        <classpath>
          <fileset dir="${lib.dir}" erroronmissingdir="false">
          	<include name="common/**"/>
        	<include name="server/**"/>
          </fileset>
          <fileset dir="${raplalib.dir}">
           	<include name="common/**"/>
        	<include name="server/**"/>
            <include name="servlet-api-*.jar" />
          </fileset>
          <dirset dir="${plugin.base}" includes="${plugin.dependencies.build}"/>
          <pathelement path="${rapla.build.dest.main}"/>
        </classpath>
    </javac>

    <!-- The png,license,xsl and rng files must be in the correct classpath  -->
    <copy todir="${build.dest}">
        <fileset dir="${src.dir}">
          <exclude name="**/*.java"/>
          <exclude name="**/*Resources.xml"/>
          <exclude name="**/package.html"/>
        </fileset>
    </copy>

  </target>

  <!-- Set a variable if plugin meta is already up-to-date.                  -->
  <target name="pluginmeta-check" depends="prepare">
    <condition property="pluginmeta.notrequired">
      <and>
        <uptodate>
         <srcfiles dir="${build.dest}" includes="**/*Plugin.class"/>
         <mapper type="merge" to="${build.dest}/META-INF/rapla-plugin.list"/>
        </uptodate>
      </and>
    </condition>
  </target>

  <target name="generate-plugin-meta" unless="pluginmeta.notrequired"
          description="Generate the rapla-plugin.list"
          depends="pluginmeta-check,compile">
  	<echo message="generating Plugin Metainfo for ${project.name}"/>
  	<mkdir dir="${generated.dir}/META-INF"/>
    <java classname="org.rapla.framework.ServiceListCreator" failonerror="true" fork="yes">
      <arg value="${build.dest}"/>
      <arg value="${generated.dir}/META-INF/rapla-plugin.list"/>
      <classpath>
        <pathelement path="${rapla.build.dest.main}"/>
        <pathelement path="${build.dest}"/>
      </classpath>
    </java>
    <copy file="${generated.dir}/META-INF/rapla-plugin.list" tofile="${build.dest}/META-INF/rapla-plugin.list"/>
  </target>

<!-- Set a variable if resources are already up-to-date.                  -->
  <target name="resources-check" depends="init">
    <condition property="resources.notrequired">
        <and>
            <uptodate>
                <srcfiles dir="${src.dir}">
                    <include name="**/*Resources.xml" />
                </srcfiles>
                <mapper type="glob" from="*Resources.xml" to="${build.dest}/*Resources.properties" />
            </uptodate>
        </and>
    </condition>
  </target>

  <target name="compile-resources" unless="resources.notrequired" description="Generate and compile the RaplaResources" depends="resources-check,compile">
    <echo message="generating Resourcefiles" />

    <java classname="org.rapla.components.xmlbundle.impl.ResourceFileGenerator" failonerror="true" fork="yes">
        <arg value="${src.dir}" />
        <arg value="${build.dest}" />
        <classpath>
            <pathelement path="${rapla.build.dest.main}" />
        </classpath>
    </java>


    <!--    <delete dir="${temp.dir}/languages" /> -->
  </target>

  <target name="build" depends="compile,compile-resources,generate-plugin-meta">
    <jar jarfile="${build.dir}/${main.lib}">
         <fileset dir="${build.dest}">
         </fileset>
         <manifest>
           <attribute name="Created-By" value="${user.name}"/>
           <section name="common">
  	           <attribute name="Implementation-Title" value="common"/>
               <attribute name="Implementation-Version" value="${doc.version} ${TODAY}" />
               <attribute name="Bundle-License" value="http://www.gnu.org/licenses/gpl.html"/>
           </section>
           <attribute name="Codebase" value="*"/>
  	   	   <attribute name="Application-Name" value ="${application.name}"/>
           <attribute name="Permissions" value="all-permissions"/>
       </manifest>
    </jar>
  </target>

  
  <target name="copytowebapp" depends="build">
  	<copy todir="${webapp.dir}/webclient">
    	<fileset dir="${lib.dir}/common" erroronmissingdir="false">
            <include name="*.jar" />
        </fileset>
    </copy>
  	
  	<copy file="${build.dir}/${main.lib}" tofile="${webapp.dir}/webclient/${mainclient.lib}"/>
  	<jar jarfile="${webapp.dir}/webclient/${mainclient.lib}" update="true">
  	  <manifest>
           <attribute name="Permissions" value="${permissions.client}"/>
  	  </manifest>
    </jar>
    <copy todir="${webapp.dir}/WEB-INF/lib" >
        <fileset dir="${lib.dir}/common" erroronmissingdir="false">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/server" erroronmissingdir="false">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${build.dir}">
            <include name="${main.lib}" />
        </fileset>
    </copy>

    <antcall target="copywar"/>
  </target>

    <target name="copywar" if="war.present">
        <copy todir="${webapp.dir}" >
            <fileset dir="${war.dir}">
                <include name="**"  />
            </fileset>
        </copy>
    </target>
	
</project>
<!-- end file build.xml -->
